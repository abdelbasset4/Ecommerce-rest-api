{
  "openapi": "3.0.3",
  "info": {
    "title": "Full Ecommerce REST API",
    "description": "this is full ecommerce rest api with all features ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "abdelbasset4real@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "__comment1__": "this is  comment",
    "/api/v1/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "get all existing categories",
        "description": "get all existing categories",
        "operationId": "getcategories",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Add a new Category to the store",
        "description": "Add a new Category to the store",
        "operationId": "addCategory",
        "requestBody": {
          "description": "Create a new Category in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/categories/{categoryId}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Find category by ID",
        "description": "Returns a single category",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Updates a category in the store with form data",
        "description": "",
        "operationId": "updateCtegory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update a  Category by id in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/categories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Deletes a ctegory",
        "description": "delete a category",
        "operationId": "deleteCategory",
        "parameters": [
         
          {
            "name": "categoryId",
            "in": "path",
            "description": "category id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid category value"
          }
        }
        
      }
    },
    "__comment__": "this is  comment",
    "/api/v1/subcategories": {
      "get": {
        "tags": [
          "Sub Categories"
        ],
        "summary": "get all existing sub categories",
        "description": "get all existing sub categories",
        "operationId": "getsubcategories",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      },
      "post": {
        "tags": [
          "Sub Categories"
        ],
        "summary": "Add a new subcategories to the store",
        "description": "Add a new subcategories to the store",
        "operationId": "addSubCategories",
        "requestBody": {
          "description": "Create a new subcategories in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/subcategories/{subcategorieId}": {
      "get": {
        "tags": [
          "Sub Categories"
        ],
        "summary": "Find subcategorie by ID",
        "description": "Returns a single subcategorie",
        "operationId": "getSubcategoriesById",
        "parameters": [
          {
            "name": "subcategorieId",
            "in": "path",
            "description": "ID of subcategories to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subcategories"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "subcategory not found"
          }
        }
      },
      "put": {
        "tags": [
          "Sub Categories"
        ],
        "summary": "Updates a subcategorie in the store with form data",
        "description": "",
        "operationId": "updateSubCategories",
        "parameters": [
          {
            "name": "subcategorieId",
            "in": "path",
            "description": "ID of subcategorie that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update a  subcategorie by id in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/subcategories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Sub Categories"
        ],
        "summary": "Deletes a subcategorie",
        "description": "delete a subcategorie",
        "operationId": "deleteSubCategorie",
        "parameters": [
         
          {
            "name": "subcategorieId",
            "in": "path",
            "description": "subcategories id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid subcategory value"
          }
        }
        
      }
    },
    "comment2" : "this is comment",
    "/api/v1/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "get all existing Brands",
        "description": "get all existing Brands",
        "operationId": "getBrands",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brands not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Add a new Brands to the store",
        "description": "Add a new Brands to the store",
        "operationId": "addBrands",
        "requestBody": {
          "description": "Create a new Brands in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/brands/{brandId}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Find Brand by ID",
        "description": "Returns a single brand",
        "operationId": "getBrandById",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/brands"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "brand not found"
          }
        }
      },
      "put": {
        "tags": [
          "Brands"
        ],
        "summary": "Updates a brand in the store with form data",
        "description": "",
        "operationId": "updatebrand",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update a  Brand by id in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/brands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Deletes a brand",
        "description": "delete a brand",
        "operationId": "deleteBrand",
        "parameters": [
         
          {
            "name": "brandId",
            "in": "path",
            "description": "brand id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid brand value"
          }
        }
        
      }
    },
    "comment3" : "this is comment",
    "/api/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "get all existing Products",
        "description": "get all existing Products",
        "operationId": "getProducts",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Products not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add a new Product to the store",
        "description": "Add a new Product to the store",
        "operationId": "addBrands",
        "requestBody": {
          "description": "Create a new Product in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Find Product by ID",
        "description": "Returns a single Product",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates a Product in the store with form data",
        "description": "",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of Product that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update a  Product by id in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/products"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a Product",
        "description": "delete a Product",
        "operationId": "deleteProduct",
        "parameters": [
         
          {
            "name": "productId",
            "in": "path",
            "description": "Product id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid product value"
          }
        }
        
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign up user",
        "description": "sign up with email and password",
        "operationId": "Signup",
        "requestBody": {
          "description":  "sign up with email and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/signup"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/signup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/signup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signup"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/signup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "login for regirster user",
        "description":"Login the system using email and password",
        "operationId": "Login",
        "requestBody": {
          "description":  "Login the system using email and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/resetPassword": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset user password ",
        "description":"Reset user password ",
        "operationId": "resetPassword",
        "requestBody": {
          "description":  "Reset user password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resetPassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/resetPassword"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/resetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPassword"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/resetPassword"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/forgotPassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send email if user forgot password ",
        "description":"Send email if user forgot password ",
        "operationId": "forgotPassword",
        "requestBody": {
          "description":  "Send email if user forgot password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/forgotPassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/forgotPassword"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/forgotPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forgotPassword"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/forgotPassword"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/verifyResetCode": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify reset code that sending to user's email ",
        "description":"Verify reset code that sending to user's email ",
        "operationId": "forgotPassword",
        "requestBody": {
          "description":  "Verify reset code that sending to user's email ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/verifyResetCode"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/verifyResetCode"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/verifyResetCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/verifyResetCode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/verifyResetCode"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/virefied/{tokenLink}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "sending link to user email if user forgot password",
        "description":"sending link to user email if user forgot password",
        "operationId": "virefied",
        "requestBody": {
          "description":  "Verify reset code that sending to user's email ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/virefiedLink"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/virefiedLink"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/virefiedLink"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "tokenLink",
            "in": "path",
            "description": "token to verify request for forgot password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/virefiedLink"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/virefiedLink"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/activate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send Email to Cancel Deactivate Account",
        "description":"Send Email to Cancel Deactivate Account ",
        "operationId": "activate",
        "requestBody": {
          "description":  "Send Email to Cancel Deactivate Account ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/activate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/activate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/activate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/activate"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/auth/activate/{token}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "verify link and activate user account",
        "description":"verify link and activate user account",
        "operationId": "activate",
        "requestBody": {
          "description":  "verify link and activate user account ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activatetoken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/activatetoken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/activatetoken"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "token to activate user account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/activatetoken"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/activatetoken"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/users":{
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get all users (admin - manager)",
        "description": "get all existing users (admin - manager)",
        "operationId": "getUsers",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user in the system (admin - manager) can be created",
        "description":"Create user in the system (admin - manager) can be created",
        "operationId": "createUser",
        "requestBody": {
          "description":  "Create user in the system (admin - manager) can be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get specific user (admin - manager)",
        "description": "Get specific user by id (admin - manager)",
        "operationId": "specificUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user (admin - manager) can be updated",
        "description": "",
        "operationId": "updateuser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update a  user by id in the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user (admin-manger)",
        "description": "delete a user by id in the system (admin-manger)",
        "operationId": "deleteProduct",
        "parameters": [
         
          {
            "name": "id",
            "in": "path",
            "description": "user id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid product value"
          }
        }
        
      }
    },
    "/api/v1/users/changepassword/{id}":{
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "change user password",
        "description":"change user password",
        "operationId": "changePassword",
        "requestBody": {
          "description":  "change user password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changepassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/changepassword"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/changepassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changepassword"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/changepassword"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/users/getMe":{
      "get": {
        "tags": [
          "Logged user"
        ],
        "summary": "get logged user data",
        "description": "get logged user data",
        "operationId": "getUsers",
       
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
        
      }
    },
    "/api/v1/users/changeMyPassword":{
      "put": {
        "tags": [
          "Logged user"
        ],
        "summary": "Logged user can be change your password",
        "description":"Logged user can be change your password",
        "requestBody": {
          "description":  "Logged user can be change your password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeMyPassword"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/changeMyPassword"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/changeMyPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeMyPassword"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/changeMyPassword"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/users/changeMyData":{
      "put": {
        "tags": [
          "Logged user"
        ],
        "summary": "Logged user can be change your data",
        "description":"Logged user can be change your data",
        "requestBody": {
          "description":  "Logged user can be change your data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeMydata"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/changeMydata"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/changeMydata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeMydata"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/changeMydata"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    },
    "/api/v1/users/deleteMe":{
      "put": {
        "tags": [
          "Logged user"
        ],
        "summary": "Logged user can be delete your account",
        "description":"Logged user can be delete your account",
        "requestBody": {
          "description":  "Logged user can be delete your account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
        
      }
    }
  },
  "components": {
    "schemas": {
      "categories": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {

          "name": {
            "type": "string",
            "example": "Phone"
          },
          "image": {
            "type": "string",
            "example": "phone.jpg"
          }
        }
      },
      "subcategories": {
        "required": [
          "name",
          "category"
        ],
        "type": "object",
        "properties": {

          "name": {
            "type": "string",
            "example": "charger"
          },
          "category": {
            "type": "string",
            "example": "63a4ab9da67ebf51ce031590"
          }
        }
      },
      "brands": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple"
          }
        }
      },
      "products": {
        "required": [
          "title",
          "description",
          "quantity",
          "price",
          "imageCover",
          "category"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "aplle 14 pro max"
          },
          "description": {
            "type": "string",
            "example": "last ihpne in 2023 this is ihpone 14 pro max"
          },
          "quantity": {
            "type": "integer",
            "example": 20
          },
          "sold": {
            "type": "integer",
            "example":1000
          },
          "price": {
            "type": "integer",
            "example": 19.99
          },
          "priceAfterDiscount": {
            "type": "integer",
            "example": 10.99
          },
          "colors": {
            "type": "array",
            "example": "Red"
          },
          "imageCover": {
            "type": "string",
            "example": "cover.jpg"
          },
          "images": {
            "type": "array",
            "example": "1.jpg 2.jpg 3.jpg"

          },
          "category": {
            "type": "string",
            "example": "63a4ab9da67ebf51ce031590"
          },
          "subcategories": {
            "type": "array",
            "example": "63a4ab9da67ebf51ce031590"
          },
          "brand": {
            "type": "string",
            "example": "63a4ab9da67ebf51ce031590"
          },
          "ratingsAverage": {
            "type": "integer",
            "example": 4.5
          },
          "ratingsQuantity": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "signup": {
        "required": [
          "name",
          "email",
          "password",
          "confirmPassword"
        ],
        "type": "object",
        "properties": {

          "name": {
            "type": "string",
            "example": "user1"
          },
          "email": {
            "type": "string",
            "example": "a@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "125866545"
          },
          "confirmPassword": {
            "type": "string",
            "example": "125866545"
          }
        }
      },
      "login": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {

          "email": {
            "type": "string",
            "example": "a@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "125866545"
          }
        }
      },
      "resetPassword": {
        "required": [
          "email",
          "password",
          "rePassword"
        ],
        "type": "object",
        "properties": {

          "email": {
            "type": "string",
            "example": "a@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "125866545"
          },
          "rePassword": {
            "type": "string",
            "example": "125866545"
          }
        }
      },
      "forgotPassword": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {

          "email": {
            "type": "string",
            "example": "a@gmail.com"
          }
        }
      },
      "verifyResetCode": {
        "required": [
          "resetCode"
        ],
        "type": "object",
        "properties": {

          "resetCode": {
            "type": "string",
            "example": "154788"
          }
        }
      },
      "activate account": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {

          "email": {
            "type": "string",
            "example": "a@gmail.com"
          }
        }
      },
      "user": {
        "required": [
          "name",
          "email",
          "password",
          "confirmPassword"
        ],
        "type": "object",
        "properties": {

          "name": {
            "type": "string",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "example": "a@gmail.com"
          },
          "phone": {
            "type": "string",
            "example": "06748522558"
          },
          "profileImg": {
            "type": "string",
            "example": "user.png"
          },
          "password": {
            "type": "string",
            "example": "654315645"
          },
          "confirmPassword": {
            "type": "string",
            "example": "654315645"
          },
          "role": {
            "type": "string",
            "example": "user"
          }
        }
      },
      "changepassword":{
        "required": [
          "currentpassword",
          "password",
          "confirmPassword"
        ],
        "type": "object",
        "properties": {

          "currentpassword": {
            "type": "string",
            "example": "123456"
          },
          "password": {
            "type": "string",
            "example": "987654"
          },
          "confirmPassword": {
            "type": "string",
            "example": "987654"
          }
        }
      },
      "changeMyPassword":{
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {

          "password": {
            "type": "string",
            "example": "987654"
          }
        }
      },
      "changeMydata":{
        "required": [
          "name",
          "email",
          "phone",
          "profileImg"
        ],
        "type": "object",
        "properties": {

          "name": {
            "type": "string",
            "example": "admin1"
          },
          "email": {
            "type": "string",
            "example": "admin1@gmail.com"
          },
          "phone": {
            "type": "string",
            "example": "067488855574"
          },
          "profileImg": {
            "type": "string",
            "example": "user.png"
          }
        }
      }
    },
    "requestBodies": {
      "categories": {
        "description": "category object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/categories"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/categories"
            }
          }
        }
      },
      "subcategories": {
        "description": "subcategories object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subcategories"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/subcategories"
            }
          }
        }
      },
      "brands": {
        "description": "Brands object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/brands"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/brands"
            }
          }
        }
      },
      "products": {
        "description": "Products object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/products"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/products"
            }
          }
        }
      },
      "signup": {
        "description": "Signup object that needs to be create user to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/signup"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/signup"
            }
          }
        }
      },
      "login": {
        "description": "login object that needs to be login the  user to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/login"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/login"
            }
          }
        }
      },
      "rePassword": {
        "description": "Reset user password ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rePassword"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/rePassword"
            }
          }
        }
      },
      "forgotPassword": {
        "description": "Forgot password ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/forgotPassword"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/forgotPassword"
            }
          }
        }
      },
      "verifyResetCode": {
        "description": "Verify reset code ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/verifyResetCode"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/verifyResetCode"
            }
          }
        }
      },
      "virefiedLink": {
        "description": "Verify link for forgot password ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/virefiedLink"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/virefiedLink"
            }
          }
        }
      },
      "activate account": {
        "description": "email for activate account ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/activate"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/activate"
            }
          }
        }
      },
      "activate account link ": {
        "description": "link for activate user account ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/activatetoken"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/activatetoken"
            }
          }
        }
      },
      "user": {
        "description": "create a user in the system ",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/user"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/user"
            }
          }
        }
      },
      "changepassword": {
        "description": "change user password",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/changepassword"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/changepassword"
            }
          }
        }
      },
      "changeMyPassword":{
        "description": "change logged user password",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/changeMyPassword"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/changeMyPassword"
            }
          }
        }
      },
      "changeMydata":{
        "description": "change logged user data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/changeMydata"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/changeMydata"
            }
          }
        }
      }
    }
  }
}